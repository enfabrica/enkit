load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("@gazelle//:def.bzl", "gazelle")
load("@rules_multirun//:defs.bzl", "multirun")
load("@rules_python//python/pip_install:requirements.bzl", "compile_pip_requirements")

# To update and generate the BUILD.bazel files, run:
#     bazelisk run //:gazelle
#
# This will scan the source code, and bazed on imports, generate
# or update the BUILD.bazel files. Run every time you change imports,
# create a new library or binary.
#
# To update the list of dependencies downloaded by bazel, run:
#     bazelisk run //:gazelle_update_repos
#
# This will read the go.mod file, and based on that, add statements
# to download the correct dependency for bazel to download. The dependency
# is added to the bazel/go_repositories.bzl file.
#

# Set the prefix for this repo
# gazelle:prefix github.com/enfabrica/enkit

# When adding protos used by Go, typically the import path is the same as the
# proto's containing dir. However, this will confuse Go tooling (`go mod tidy`,
# for instance) when there are no source files present.
#
# To work around this, add a source file called `empty.go` with only a package
# declaration, so from the Go tooling's perspective it is a legitimate package.
# The directive below will prevent `empty.go` files from being added to
# Gazelle-generated rules.
#
# gazelle:exclude **/empty.go

# Ensure that BUILD files have targets generated with the correct convention
# TODO(scott): Change to `import` after targets have migrated to use the new
# convention
# gazelle:go_naming_convention import_alias
gazelle(
    name = "gazelle",
    command = "fix",
    prefix = "github.com/enfabrica/enkit",
)

gazelle(name = "gazelle_update_repos")

# Custom gazelle resolve mappings
# Some third-party dependencies that are bazel-aware bamboozle gazelle running
# in our repository, which tries to generate dependency labels that don't exist.
# These mappings keep gazelle from generating bogus dependency labels.
#
# gazelle:resolve go kythe.io/kythe/go/platform/delimited @io_kythe//kythe/go/platform/delimited
# gazelle:resolve go github.com/bazelbuild/remote-apis/build/bazel/remote/execution/v2 @com_github_bazelbuild_remote_apis//build/bazel/remote/execution/v2:remote_execution_go_proto

# Buildbarn gazelle resolve mappings
# Buildbarn dependencies may need certain overrides; these mappings are copied
# from BUILD.bazel in github.com/buildbarn/bb-remote-execution so that libraries
# from that repo can build.

# gazelle:resolve proto pkg/proto/configuration/cloud/aws/aws.proto @com_github_buildbarn_bb_storage//pkg/proto/configuration/cloud/aws:aws_proto
# gazelle:resolve proto go pkg/proto/configuration/cloud/aws/aws.proto @com_github_buildbarn_bb_storage//pkg/proto/configuration/cloud/aws
# gazelle:resolve proto proto google/rpc/code.proto @googleapis//google/rpc:code_proto
# gazelle:resolve proto go google/rpc/code.proto @org_golang_google_genproto_googleapis_rpc//code
# gazelle:resolve proto proto google/rpc/status.proto @googleapis//google/rpc:status_proto
# gazelle:resolve proto go google/rpc/status.proto @org_golang_google_genproto_googleapis_rpc//status

# gazelle:resolve go github.com/enfabrica/enkit/auth/server/assets/templates //auth/server/assets/templates

exports_files(
    [
        "go.mod",
        "go.sum",
    ],
    visibility = ["//:__subpackages__"],
)

# To automatically format all .bzl files and all BUILD.bzl files, run:
#     bazelisk run //:buildifier
buildifier(name = "buildifier")

buildifier(
    name = "buildifier.check",
    exclude_patterns = [
        "./.git/*",
    ],
    lint_mode = "warn",
    mode = "diff",
)

multirun(
    name = "binaries_release",
    commands = [
        "//enkit:deploy",
        "//staco:deploy",
        "//faketree:astore_push",
        "//flextape/server:astore_push",
        "//flextape/client/flextape_client:astore_push",
    ],
)

compile_pip_requirements(
    name = "python_deps",
    requirements_in = "requirements.in",
    requirements_txt = "requirements.txt",
)

string_flag(
    name = "kernel_dir",
    build_setting_default = "placeholder",
    visibility = ["//visibility:public"],
)

config_setting(
    name = "kernel_dir_placeholder",
    flag_values = {":kernel_dir": "placeholder"},
    visibility = ["//visibility:public"],
)
