syntax = "proto3";

package flextape.proto;

import "flextape/proto/flextape.proto";

option go_package = "github.com/enfabrica/enkit/flextape/proto";

// Message used for server config file
message Config {
  // One LicenseConfig for each vendor::feature tuple.
  // This should be configured from the license file the vendor provides.
  repeated LicenseConfig license_configs = 1;

  ServerConfig server = 2;
}

// Default prioritizer. Licenses are allocated in the order they are requested.
message FIFOPrioritizer {}

// Allocates licenses so that they are spread evenly across users.
//
// This means that users can jump ahead of the line, or be bumped after new
// requests.
message EvenOwnersPrioritizer {}

message LicenseConfig {
  // vendor::feature tuple
  flextape.proto.License license = 1;
  // Total number of licenses that can be allocated.
  uint32 quantity = 2;

  // Strategy to distribute licenses.
  oneof prioritizer {
    FIFOPrioritizer fifo = 3;
    EvenOwnersPrioritizer even_owners = 4;
  }
}

// General options for the entire instance
message ServerConfig {
  // Interval on which actions should refresh their queue position while in
  // queue for an allocation.
  // Default: 15s
  uint32 queue_refresh_duration_seconds = 1;

  // Interval on which actions should refresh their allocation while the action
  // is executing.
  // Default: 30s
  uint32 allocation_refresh_duration_seconds = 2;

  // Interval on which to clean up expired/released allocations and queue
  // entries, and promote queued entries to allocations.
  // Default: 1s
  uint32 janitor_interval_seconds = 3;

  // When the service first starts, for this period of time it holds off on
  // allocating any new licenses, and instead listens for and "adopts"
  // allocations that it hears about via the "Refresh" RPC. This duration should
  // be >= allocation_refresh_duration_seconds, to guarantee that all clients
  // Refresh() their allocation before the server moves into the normal
  // operating state.
  // Default: 45s
  uint32 adoption_duration_seconds = 4;
}
