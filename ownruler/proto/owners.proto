// This protocol buffer defines the configuration parameters accepted
// by the BOT, and internal representation of OWNERS/CODEOWNERS file.
//
// The BOT looks for configuration files in any directory of the
// repository.
//
// Different format of configuration files are supported. The internal
// parser will always convert those files into the internal representation,
// the protocol buffer defined here.
//
// A few important notes:
//
//  - All messages defined here have a "location" parameter.
//    It is populated automatically by the parser and used to keep
//    track of where the configuration parameter was originally
//    loaded from (file, and line number).
//    This is mostly used to provide helpful debug and error messages,
//    to allow debugging why a specific action was taken (which can
//    get tricky in the presence of include files or file: syntax).
//
//    Those fields are populated automatically by the parser, and
//    should normally not be set when writing the config file.
//    You can, however, use them to propagate - for example - information
//    of where a configuration parameter was generated from, in case the
//    protocol buffer configuration is generated by a tool.
//
//  - A few comments reference the GERRIT OWNERS file grammar, or
//    the github CODEOWNERS grammar.
//
//    Documentation about the two can be found here:
//    - gerrit: https://gerrit.googlesource.com/plugins/find-owners/+/master/src/main/resources/Documentation/syntax.md
//    - github: https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners#codeowners-syntax
//
syntax = "proto3";

package ownruler.proto;

option go_package = "github.com/enfabrica/enkit/ownruler/proto";

// Represents an user read from the configuration file in the
// CODEOWNERS or gerrit OWNERS syntax.
message User {
    string location = 1;

    // User identifier.
    //
    // It can be a fully qualified email, like carlo@enfabrica.net.
    // It can be a github (or gerrit) username, like @ccontavalli.
    // It can be a file in the repository, like file:/web/team.
    // (see gerrit documentation)
    //
    // Absolute paths are interpreted relative to the root of the
    // repository, relative paths to the location of the file using
    // file:...
    string identifier = 2;
}

// Provides configuration for files matching a pattern.
message Match {
    string location = 1;

    // If set to true, rules in parent directories will be used to find
    // other owners or users to be notified.
    bool parent = 2;

    // Pattern that will be checked to determine if this configuration
    // applies to the PR or specific file. Uses filepath.Match() syntax.
    string pattern = 3;

    // Set of users this match will result in either being marked as
    // owners, or being notified of the change.
    repeated User user = 4;
}

// Represents something to do to files in this directory and its children.
message Action {
    string location = 1;

    oneof op {
      // This action causes another OWNERS file to be included, replacing
      // the include statement with the actions of the file read.
      string include = 2;

      // This action causes a set of users to be marked as required reviewers.
      Match review = 3;
      // This action causes a set of users to be notified about the change.
      Match notify = 4;

      // TODO: define more actions in the future. Example: custom validators,
      // custom notifiers, pubsub messages, ...
    }
}

// Top level of the configuration file.
// Represents a set of actions.
message Owners {
    string location = 1;

    repeated Action action = 2;
}
