diff --git BUILD.bazel BUILD.bazel
index 22b925f..c796c6f 100644
--- BUILD.bazel
+++ BUILD.bazel
@@ -1,5 +1,4 @@
 load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")
-load("@com_github_buildbarn_bb_storage_npm//:defs.bzl", "npm_link_all_packages")
 load("@gazelle//:def.bzl", "gazelle")
 
 # gazelle:go_grpc_compilers @rules_go//proto:go_proto,@rules_go//proto:go_grpc_v2
@@ -27,7 +26,3 @@ gazelle(
 buildifier(
     name = "buildifier",
 )
-
-npm_link_all_packages(
-    name = "node_modules",
-)
diff --git MODULE.bazel MODULE.bazel
index 42c11e5..d464fe0 100644
--- MODULE.bazel
+++ MODULE.bazel
@@ -137,14 +137,6 @@ llvm.toolchain(
 )
 use_repo(llvm, "llvm_toolchain_llvm")
 
-npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
-npm.npm_translate_lock(
-    name = "com_github_buildbarn_bb_storage_npm",
-    link_workspace = "com_github_buildbarn_bb_storage",
-    pnpm_lock = "//:pnpm-lock.yaml",
-)
-use_repo(npm, "com_github_buildbarn_bb_storage_npm")
-
 oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
 oci.pull(
     name = "distroless_static",
diff --git pkg/otel/BUILD.bazel pkg/otel/BUILD.bazel
index f60aeae..d95491c 100644
--- pkg/otel/BUILD.bazel
+++ pkg/otel/BUILD.bazel
@@ -1,6 +1,5 @@
 load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
 load("@aspect_rules_js//js:defs.bzl", "js_run_binary")
-load("@com_github_buildbarn_bb_storage_npm//:purgecss/package_json.bzl", purgecss_bin = "bin")
 load("@rules_go//go:def.bzl", "go_library", "go_test")
 
 go_library(
@@ -15,7 +14,7 @@ go_library(
     # keep
     embedsrcs = [
         "active_spans.html",
-        ":stylesheet",
+        "stylesheet.css",
     ],
     importpath = "github.com/buildbarn/bb-storage/pkg/otel",
     visibility = ["//visibility:public"],
@@ -46,7 +45,7 @@ go_test(
         "w3c_trace_context_test.go",
     ],
     # keep
-    embedsrcs = [":stylesheet"],
+    # embedsrcs = [":stylesheet"],
     deps = [
         ":otel",
         "//internal/mock",
@@ -63,35 +62,6 @@ go_test(
     ],
 )
 
-purgecss_bin.purgecss_binary(
-    name = "purgecss",
-    tags = ["manual"],
-)
-
-# Create a copy of Bootstrap that only contains the style attributes
-# used by the HTML template.
-js_run_binary(
-    name = "stylesheet_platform",
-    srcs = [
-        "active_spans.html",
-        "@com_github_twbs_bootstrap//:css/bootstrap.min.css",
-    ],
-    outs = ["stylesheet.css"],
-    args = [
-        # js_run_binary runs in the output dir;
-        # see https://github.com/aspect-build/rules_js/blob/main/docs/migrate.md#account-for-change-to-working-directory
-        "--css",
-        "../../../$(location @com_github_twbs_bootstrap//:css/bootstrap.min.css)",
-        "--content",
-        "../../../$(location active_spans.html)",
-        "--output",
-        "../../../$(location stylesheet.css)",
-    ],
-    copy_srcs_to_bin = False,
-    tags = ["manual"],
-    tool = ":purgecss",
-)
-
 # Work around https://github.com/aspect-build/rules_js/issues/2121 by always
 # building the stylesheet for the host platform, even if we are cross
 # compiling.
