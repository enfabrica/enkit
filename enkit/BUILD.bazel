load("//bazel/astore:defs.bzl", "astore_upload")
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

go_library(
    name = "enkit_lib",
    srcs = ["main.go"],
    importpath = "github.com/enfabrica/enkit/enkit",
    visibility = ["//visibility:private"],
    deps = ["//enkit/cmd"],
)

go_binary(
    name = "enkit",
    embed = [":enkit_lib"],
    visibility = ["//visibility:public"],
)

go_binary(
    name = "enkit-linux-amd64",
    embed = [":enkit_lib"],
    goarch = "amd64",
    goos = "linux",
    pure = "on",
    static = "on",
    visibility = ["//visibility:public"],
)

go_binary(
    name = "enkit-linux-cgo-amd64",
    cgo = True,
    embed = [":enkit_lib"],
    goarch = "amd64",
    goos = "linux",
    # Force cgo DNS resolver to be used, which is required in certain
    # environments (those using NIS to resolve addresses, for one). Also disable
    # `static`, since this causes segfaults when forcing cgo to be enabled.
    pure = "off",
    visibility = ["//visibility:public"],
)

go_binary(
    name = "enkit-darwin-amd64",
    embed = [":enkit_lib"],
    goarch = "amd64",
    goos = "darwin",
    static = "on",
    visibility = ["//visibility:public"],
)

go_binary(
    name = "enkit-linux-arm64",
    embed = [":enkit_lib"],
    goarch = "arm64",
    goos = "linux",
    static = "on",
    visibility = ["//visibility:public"],
)

go_binary(
    name = "enkit-win-amd64",
    embed = [":enkit_lib"],
    goarch = "amd64",
    goos = "windows",
    static = "on",
    visibility = ["//visibility:public"],
)

# To make these artifacts publicly available to download via curl,
# use this command: enkit astore public add
astore_upload(
    name = "deploy",
    file = "tools/enkit",
    targets = [
        ":enkit-linux-cgo-amd64",
        ":enkit-linux-arm64",
        ":enkit-darwin-amd64",
        ":enkit-win-amd64",
    ],
    visibility = ["//:__pkg__"],
)
