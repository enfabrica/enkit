#!/bin/bash

# Generate a custom kernel (to build external modules) accordingly to what our
# bazel kernel build rules expect (i.e., a .tar.gz just like the ones
# generated by kbuild).

usage()
{
        cat <<EOF
Generate a kbuild compliant .tar.gz starting from a compiled custom linux source tree.
usage: ${0##*/} OPTS
    -k KDIR      Directory containing the compiled custom linux source tree
    -t OUTDIR    Root directory for containing the generated kernel package
    -v KVER      Kernel version (used to name the package)
This will generate a KVER-test.tar.gz file inside OUTDIR, built from the pre-compiled kernel in KDIR.
The pre-compiled kernel is expected to have been obtained by:
1. Downloading kernel source code from somewhere into KDIR
2. export ARCH=x
3. cd KDIR && make defconfig && make menuconfig # Enable/disable stuff.
4. make
EOF
}

generate_install_script()
{
        cat > $1 <<EOF
#!/bin/bash


INSTALLED=\${INSTALLED:-\$PWD}

# The install script is expected to output the path of the directory to use for builds.
# Redirect all stdout to stderr in case any of the commands here decides to output a
# benign informational message on stdout, breaking the build.

{
    set -e

    rm -rf "\$INSTALLED"/'lib/modules/$KERNELVERSION-test/build'
    ln -sf "\$INSTALLED"/'usr/src/linux-headers-$KERNELVERSION-test' "\$INSTALLED"/'lib/modules/$KERNELVERSION-test/build'
    rm -rf "\$INSTALLED"/'lib/modules/$KERNELVERSION-test/source'
    ln -sf "\$INSTALLED"/'usr/src/linux-headers-$KERNELVERSION-test' "\$INSTALLED"/'lib/modules/$KERNELVERSION-test/source'

    find . -type f -name Makefile |xargs sed -i -e "s@/\([/a-zA-Z0-9._-]*\)usr/src/linux@\$INSTALLED/usr/src/linux@g"
} 1>&2

build='lib/modules/$KERNELVERSION-test'
test -d "\$build" && { echo "\$build"; exit 0; }

echo "build directory not detect - installation failed?" 1>&2
echo "was looking for '\$build' in \$PWD" 1>&2
exit 1
EOF
}

while getopts ":k:t:v:h" o
do
        case $o in
                k) SRCDIR="$OPTARG";;
                t) INSTALLDIR="$OPTARG";;
                v) KERNELVERSION="$OPTARG";;
                h) usage; exit 0;;
                *) usage; exit 1;;
        esac
done

if ! [[ -v SRCDIR ]] || ! [[ -v INSTALLDIR ]] || ! [[ -v KERNELVERSION ]];
then
	usage
	exit 1
fi

SRCDIR=$(realpath -s "$SRCDIR")
INSTALLDIR=$(realpath -s "$INSTALLDIR")
TARGETDIR="${INSTALLDIR}/usr/src/linux-headers-${KERNELVERSION}-test"
SCRIPTNAME="install-${KERNELVERSION}-test.sh"

set -e
mkdir -p "${TARGETDIR}/arch"
mkdir -p "${TARGETDIR}/include"
mkdir -p "${TARGETDIR}/scripts"
mkdir -p "${INSTALLDIR}/lib/modules/${KERNELVERSION}-test/build"

generate_install_script "${INSTALLDIR}/${SCRIPTNAME}"
chmod 755 ${INSTALLDIR}/${SCRIPTNAME}
cp -r $SRCDIR/scripts/* $TARGETDIR/scripts/
cp -r $SRCDIR/arch/* $TARGETDIR/arch/
cp -r $SRCDIR/include/* $TARGETDIR/include/
cp -r $SRCDIR/Makefile $SRCDIR/.config $SRCDIR/Module.symvers $TARGETDIR/
(
	cd "$INSTALLDIR"
	tar -czvf "${KERNELVERSION}-test.tar.gz" "${SCRIPTNAME}" "usr" "lib"
)
