load("@bazel_skylib//lib:paths.bzl", "paths")
load("//bazel/utils:messaging.bzl", "location", "package")

def _declare_binary(ctx):
    files = []
    selected = None
    for dep in ctx.files.dep:
        files.append(dep.short_path)
        if dep.short_path.endswith(ctx.attr.path):
            selected = dep
            break

    if not selected:
        fail(location(ctx) + "no file path ending in {path} could be found in {dependency}. Available files:\n  {files}".format(
            path = ctx.attr.path,
            dependency = package(ctx.attr.dep.label),
            files = "\n  ".join(files),
        ))

    output = ctx.actions.declare_file(ctx.attr.name)
    ctx.actions.symlink(output = output, target_file = selected)
    return DefaultInfo(executable = output, files = depset([output]), runfiles = ctx.runfiles(ctx.files.data))

declare_binary = rule(
    implementation = _declare_binary,
    executable = True,
    doc = """Declares a single binary extracted from a larger target.

For example:

    declare_binary(
        name = "jq",
        dep = select({
            "@platforms//os:linux": "@jq_linux_amd64//:jq",
            "@platforms//os:osx": "@jq_macos_amd64//:jq",
        }),
        path = "bin/jq",
        visibility = ["//visibility:public"],
    )

Will create a `jq` target that executes the 'bin/jq' binary from the
selected dependency. The `data` attribute allows to define runfiles for
the binary to use at run time.
""",
    attrs = {
        "path": attr.string(
            doc = "Of all the outputs generated by the target in dep, the first output having this path as suffix will be used as a binary",
            mandatory = True,
        ),
        "dep": attr.label(
            doc = "The target containing the binary to be used. Note that no runfiles are extracted from this target unless also specified in data",
            mandatory = True,
            allow_files = True,
        ),
        "data": attr.label_list(
            doc = "All files generated by targets in data will be used as runfiles for the binary",
        ),
    },
)
