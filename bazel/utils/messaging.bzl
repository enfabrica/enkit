"""Utilities to create user friendly messages for users"""

def package(label):
    """Given the label object supplied, returns its string representation.

    Args:
      label: a Label object.

    Returns:
      A string, describing the full path of the package.

    Example:
      >>> package(Label(":target"))
      "@enkit//bazel/utils:target"
    """
    return "{workspace}//{package}:{name}".format(
        workspace = label.workspace_name,
        package = label.package,
        name = label.name,
    )

def location(ctx):
    """Given the context, returns a message indicating the label.

    This is useful in print() and fail() messages, used as:
      fail(location(ctx) + "my failure message")

    The message will now include details about where the fail()
    originated from, in a human friendly format.

    Args:
      ctx: the context of a rule.

    Returns:
      A string, with a user friendly message.
    """
    return "in '{package}' - ".format(package = package(ctx.label))

def fileowner(fileobject):
    """Returns a message indicating the rule that created a File object.

    This is useful in print(), fail() and in general in debug output.
    It allows to track where a file is coming from.

    This is handy especially when dealing with files generated by other
    rules.

    Args:
      fileobject: a File object.

    Returns:
      A string describing it. Something like:
        "file 'bazel/utils/defs.bzl' from '@enkit//bazel/utils:defs.bzl'"
    """
    owner = fileobject.owner
    if owner:
        package = package(owner)
    else:
        package = "<unknown package>"
    return "file '{file}' from '{package}'".format(file = fileobject.short_path, package = package)
