load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("//bazel/utils:diff_test.bzl", "diff_test")
load("//bazel/utils:types.bzl", "escape_and_join")
load("//bazel/utils:merge_kwargs_test.bzl", "merge_kwargs_test_suite")
load("//bazel/utils:files.bzl", "write_to_file")
load("//bazel/utils:exec_test.bzl", "exec_test")

bzl_library(
    name = "diff_test_bzl",
    srcs = ["diff_test.bzl"],
    visibility = ["//visibility:public"],
)

exports_files(["run_clang_format.template.sh"])

genrule(
    name = "foobar.txt-gen",
    outs = ["foobar.txt"],
    cmd_bash = "echo foo bar bum >$@",
)

diff_test(
    name = "foobar.txt-diff_test",
    actual = "foobar.txt",
    expected = "testdata/expected.foobar.txt",
)

write_to_file(
    name = "escape_and_join1",
    content = "%s\n" % escape_and_join([
        "foo bar",
        "contains\"quote",
        "contains\'singlequot",
        "contains;semicolon",
    ]),
    output = "escape_and_join1.actual",
)

diff_test(
    name = "escape_and_join1_test",
    actual = "escape_and_join1.actual",
    expected = "testdata/escape_and_join1.expected",
)

merge_kwargs_test_suite(
    name = "merge_kwargs_test_suite",
)

sh_binary(
    name = "echo-argv",
    srcs = ["echo-argv_test.sh"],
)

sh_binary(
    name = "failing-script",
    srcs = ["failing-script_test.sh"],
)

# This is not really a test: it should always succeed.
# The target is here so it generates a shell script that
# the real test, echo-argv-run_test, can then invoke to
# verify that exec_test works as expected.
exec_test(
    name = "echo-argv_test",
    argv = [
        "arg1",
        "arg2 with space",
        "arg3 with $NASTY `characters`",
    ],
    dep = ":echo-argv",
)

exec_test(
    name = "failing_test",
    dep = ":failing-script",
    must_fail = True,
)

# Checks that the exec_test rule works as expected.
sh_test(
    name = "exec_test_test",
    srcs = ["echo-argv_test_check.sh"],
    data = [":echo-argv_test"],
)

load("//bazel/utils:remote.bzl", "remote_run", "remote_wrapper")
load("//bazel/utils:exec_test.bzl", "exec_test")
load("//bazel/utils:diff_test.bzl", "diff_test")
load("//bazel/utils:remote_test.bzl", "remote_run_test")

#### Support targets
filegroup(
    name = "remote-deps",
    srcs = [
        "//tools/codegen/tests:gen-test-actual-gen",  # Generated file by a tool.
    ],
)

genrule(
    name = "quote01",
    srcs = [],
    outs = ["quote01.txt"],
    cmd = """
echo "Success is not final, failure is not fatal: it is the courage to continue that counts." > "$@"
""",
)

cc_binary(
    name = "hello-world",
    srcs = ["testdata/remote/hello-world.cc"],
    data = [
        "testdata/remote/quote00.txt",  # Static file.
        ":quote01.txt",  # genrule file.
        ":remote-deps",  # filegroup.
        "@com_google_absl//:AUTHORS",  # static file from external repo.
        "@com_google_googletest//:gtest",  # generated files from external repo.
    ],
)

#### Actual tests
remote_run(
    name = "test-no-dests",
    rsync_cmd = "./bazel/utils/save-argv test1.rsync",
    rsync_opts = [
        "--test_rsync_opt",
    ],
    ssh_cmd = "./bazel/utils/testdata/remote/save-argv test1.ssh",
    ssh_opts = [
        "--test_ssh_opt",
    ],
    target = ":hello-world",
    tools = [":save-argv"],
)

# No dests are specified for a remote run - the command should fail!
exec_test(
    name = "test-no-machine-fails_test",
    dep = ":test-no-dests",
    must_fail = True,
)

#### Actual tests
sh_binary(
    name = "save-argv",
    srcs = ["testdata/remote/save-argv.sh"],
)

sh_binary(
    name = "wrapper",
    srcs = ["testdata/remote/save-argv.sh"],
    # Only to show that a dependency of a wrapper is moved correctly.
    data = ["testdata/remote/quote02.txt"],
)

remote_wrapper(
    name = "decorated-wrapper",
    rsync_opts = ["--smile"],
    target_opts = ["--wrapper-opt3"],
    wrapper = ":wrapper",
    wrapper_opts = ["--wrapper-opt2"],
    destdir = "santa-coming",
)

remote_run_test(
    name = "simple",
    dests = [
        "non-existant-machine-1.corp",
        "non-existant-machine-2.corp",
    ],
    target = ":hello-world",
)

remote_run_test(
    name = "with-opts",
    dests = [
        "non-existant-machine-1.corp",
        "non-existant-machine-2.corp",
    ],
    rsync_opts = [
        "-rsync1=foo",
        "-rsync2",
    ],
    ssh_opts = [
        "-ssh1=foo",
        "-ssh2",
    ],
    target = ":hello-world",
    target_opts = [
        "-taget1=foo",
        "-target2",
    ],
)

remote_run_test(
    name = "only-copy",
    dests = [
        "non-existant-machine-1.corp",
        "non-existant-machine-2.corp",
    ],
    only_copy = True,
    target = ":hello-world",
)

remote_run_test(
    name = "with-destdir",
    dests = [
        "non-existant-machine-1.corp",
        "non-existant-machine-2.corp",
    ],
    target = ":hello-world",
    destdir = "hw-dev-$USER/home/$USER",
)

remote_run_test(
    name = "with-wrapper",
    dests = [
        "non-existant-machine-1.corp",
        "non-existant-machine-2.corp",
    ],
    target = ":hello-world",
    target_opts = ["--target_opt1=foo"],
    wrapper = ":wrapper",
    wrapper_opts = ["--wrapper_opt1=foo"],
    destdir = "hw-dev-$USER/home/$USER",
)

remote_run_test(
    name = "with-decorated-wrapper",
    dests = [
        "non-existant-machine-1.corp",
        "non-existant-machine-2.corp",
    ],
    target = ":hello-world",
    target_opts = ["--target_opt1=foo"],
    wrapper = ":decorated-wrapper",
    wrapper_opts = ["--wrapper_opt1=foo"],
    destdir = "hw-dev-$USER/home/$USER",
)

remote_run_test(
    name = "with-remote-dir",
    dests = [
        "non-existant-machine-1.corp",
        "non-existant-machine-2.corp:my-specific-dir/test/",
    ],
    target = ":hello-world",
    target_opts = ["--target_opt1=foo"],
    destdir = "hw-dev-$USER/home/$USER",
)

remote_run_test(
    # The ssh command should have the correct path.
    name = "with-remote-dir-inverted",
    dests = [
        "non-existant-machine-2.corp:my-specific-dir/test/",
        "non-existant-machine-1.corp",
    ],
    target = ":hello-world",
    target_opts = ["--target_opt1=foo"],
    destdir = "hw-dev-$USER/home/$USER",
)

remote_run_test(
    name = "with-local-dir",
    dests = [
        "non-existant-machine-1.corp",
        "/tmp/testdir/",
    ],
    target = ":hello-world",
    target_opts = ["--target_opt1=foo"],
    destdir = "hw-dev-$USER/home/$USER",
)

remote_run_test(
    name = "with-non-run-target",
    dests = [
        "/tmp/testdir/",
    ],
    target = ":quote01",
)

remote_run_test(
    name = "with-inputs",
    dests = [
        "/tmp/testdir/",
    ],
    inputs = ":hello-world",
)

remote_run_test(
    name = "with-noop-inputs",
    dests = [
        "non-existant-machine-1.corp",
    ],
    target = ":hello-world",
    # Should be equivalent to no inputs specified.
    inputs = "@enkit//bazel/utils/remote:noop",
)

remote_run_test(
    name = "with-all-inputs",
    dests = [
        "non-existant-machine-1.corp",
    ],
    alldeps = True,
    inputs = ":hello-world",
)

remote_run_test(
    name = "with-all-basic",
    dests = [
        "non-existant-machine-1.corp",
    ],
    alldeps = True,
    target = ":wrapper",
)
