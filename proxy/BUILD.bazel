load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_push")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

go_library(
    name = "proxy_lib",
    srcs = ["main.go"],
    importpath = "github.com/enfabrica/enkit/proxy",
    visibility = ["//visibility:private"],
    deps = [
        "//lib/client",
        "//lib/kflags/kcobra",
        "//lib/srand",
        "//proxy/credentials",
        "//proxy/enproxy",
        "@com_github_spf13_cobra//:cobra",
    ],
)

go_binary(
    name = "enproxy",
    embed = [":proxy_lib"],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "enproxy_tarball",
    srcs = [
        ":enproxy",
    ],
    mode = "0755",
)

oci_image(
    name = "enproxy_image",
    base = "@golang_base",
    env = {
        "HOME": "/cache",
    },
    entrypoint = ["/enproxy"],
    tars = [":enproxy_tarball"],
    visibility = ["//visibility:private"],
    # enproxy needs to cache certificates in a directory so they survive
    # across restarts.
    #
    # This cache is extremely important: "let's encrypt" limits the number
    # of certificates it issues for a domain in a given week. If we end
    # up in a restart loop of the proxy without the cache, we'd quickly
    # exhaust this limit, and won't be able to get new certificates until
    # the rate limit grants more quota.
    #
    #TODO(bbhuynh): The volumes field is not supported in oci_image so
    # update docker-compose files to start enproxy with volumes at runtime
    # in the internal repo.
)

# To release a new version of enproxy, run:
#   bazelisk run :upload-enproxy-image
#
# WARNING: before doing so, make sure you have set all the desired
# defaults as per instructions in the credentials/ directory.
oci_push(
    name = "upload-enproxy-image",
    image = ":enproxy_image",
    repository = "gcr.io/devops-284019/infra/enproxy",
    remote_tags = ["latest"],
    visibility = ["//visibility:public"],
)
