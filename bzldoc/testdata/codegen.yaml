rules:
  elab:
    name: rule
    args: []
    kwargs:
      doc: 'Runs elab to elaborate data files.

        '
      implementation: _elab_impl
      output_to_genfiles: true
      attrs:
        data:
          name: attr.label_list
          args: []
          kwargs:
            allow_files:
            - .json
            - .yaml
            doc: A list of data files to load.
        deps:
          name: attr.label_list
          args: []
          kwargs:
            doc: A list of codegen_design target dependencies.
        data_deps:
          name: attr.label_list
          args: []
          kwargs:
            allow_files:
            - .json
            - .yaml
            doc: A list of data files dependencies to load.
        out:
          name: attr.output
          args: []
          kwargs:
            mandatory: true
            doc: The single artifact file to generate.
        overrides:
          name: attr.string_list
          args: []
          kwargs:
            doc: A pair of key=value pairs to override context data.
        elab_tool:
          name: attr.label
          args: []
          kwargs:
            executable: true
            cfg: exec
            allow_files: true
            default:
              name: Label
              args:
              - //tools/codegen:elab
              kwargs: {}
            doc: The path to the elab tool itself.
  codegen:
    name: rule
    args: []
    kwargs:
      doc: 'Runs codegen to combine templates and data files to an artifact.


        TODO(jonathan): generalize this to generate multiple artifacts.

        '
      implementation: _codegen_impl
      output_to_genfiles: true
      attrs:
        data:
          name: attr.label_list
          args: []
          kwargs:
            allow_files:
            - .json
            - .yaml
            doc: An ordered list of data files to load.
        outs:
          name: attr.output_list
          args: []
          kwargs:
            allow_empty: false
            doc: Artifacts to generate.
        srcs:
          name: attr.label_list
          args: []
          kwargs:
            allow_files:
            - .jinja2
            - .jinja
            - .template
            doc: A list of jinja2 template files to import.
        schema:
          name: attr.label
          args: []
          kwargs:
            allow_files:
            - .schema
            - schema.yaml
            doc: A jsonschema file to check the imported data against.
        overrides:
          name: attr.string_list
          args: []
          kwargs:
            doc: A pair of key=value pairs to override context data.
        template_name:
          name: attr.string
          args: []
          kwargs:
            doc: The specific jinja2 template to render (optional).
        multigen_mode:
          name: attr.bool
          args: []
          kwargs:
            doc: Enable multigen mode.
        codegen_tool:
          name: attr.label
          args: []
          kwargs:
            executable: true
            cfg: exec
            allow_files: true
            default:
              name: Label
              args:
              - //tools/codegen:codegen
              kwargs: {}
            doc: The path to the codegen tool itself.
macros:
  codegen_test:
    name: codegen_test
    args:
    - name
    - expected
  en_dpi_library:
    name: en_dpi_library
    args:
    - name
  codegen_design:
    name: codegen_design
    args:
    - name
    - config
    - deps
    doc: "Generates all supported code from a design specification.\n\nThe provided\
      \ data file must follow the \"design\" schema for specifying\ndesign elements.\n\
      \nThe following rules are generated by this macro:\n\n* `<name>-config_elab`:\
      \ produces `<name>-elab.yaml`, the elaborated data set.\n* `<name>-sv`: produces\
      \ `<name>_pkg.sv`, the generated SystemVerilog package file.\n* `<name>-model-h-gen`:\
      \ produces `<name>.model.h`, the performance model C++ header.\n* `<name>-model-cc-gen`:\
      \ produces `<name>.model.cc`, the performance model C++ implementation.\n\
      * `<name>-model`: the library compiling the previous two targets.\n* `<name>-sysc-gen`:\
      \ produces `<name>.sysc.h`, the SystemC model header (deprecated).\n* `<name>-sysc`:\
      \ the library compiling the previous target (deprecated).\n\nTODO(jonathan):\
      \ This scheme isn't perfect.  The first problem is that we need a\nseparate\
      \ codegen_design rule for each yaml file.  The second problem is that\nthis\
      \ macro assumes all files are in the same directory, and it's not clear that\n\
      the #includes will be generated correctly for dependencies in other directories.\n\
      Fixing this will require a little bazel wizardry, so I'm postponing that for\
      \ a\nfuture PR.\n\n### Args:\n\n* name: the name of the macro.  Must be the\
      \ same as the `name` attribute in\n  the config file.\n* config: the YAML\
      \ or JSON data file.  Must conform to the \"design\" schema\n  defined in\
      \ //tools/codegen/schema:design_schema.yaml.\n* deps: the name of other codegen_design\
      \ dependencies.  Each dependency\n  must be declared with its own codegen_design\
      \ rule."
filename: codegen.bzl
short_path: tools/bzldoc/testdata/codegen.bzl
label: //tools/bzldoc/testdata:codegen.bzl
doc: 'A fork of codegen.bzl.


  This is phoney-baloney documentation for testing the bzldoc flow.


  Here is *some* _markdown_ embedded in a docstring.'
