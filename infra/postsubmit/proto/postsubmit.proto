syntax = "proto3";

package infra.postsubmit;

message Build {
  // Name of this build. Needs to be unique among all builds, and should match
  // the regex `[a-z][a-z_]+`.
  string name = 1;

  // Repository that this postsubmit builds code from. Should be one of:
  // * `enfabrica/enkit`
  // * `enfabrica/internal`
  string repository = 2;

  oneof trigger {
    // Interval on which to run the build. This is a normal cron schedule
    // expression (https://crontab.guru/), except that the minutes fields can
    // (and should) be a `?` rather than fixed; this will be translated into a
    // stable value based on the name of this build, which allows builds to not
    // all hammer infrastructure by starting e.g. every hour on the hour.
    string cron = 3;

    // If set, the build is created but never run.
    bool disabled = 11;
  }

  // Bazel target patterns to include in the build.
  repeated string include_patterns = 4;

  // Bazel targets to exclude from the build; should be a subset of
  // include_patterns.
  repeated string exclude_patterns = 5;

  // Tags to include in the build.
  // If specified, targets will only be built if they contain at least one of
  // the specified tags.
  //
  // exclude_tags (below) takes precedence: targets with tags that match any of
  // exclude_tags (if specified) will still not be built, even if they are
  // included via this mechanism.
  repeated string include_tags = 9;

  // Tags to exclude from the build; build will not build targets that:
  // * are tagged with at least one of the specified tags
  // * depend on a target tagged with at least one of the specified tags
  // The build will also not run tests tagged with at least one of the specified
  // tags.
  repeated string exclude_tags = 6;

  // List of emails to get notifications when the build fails. Ideally this is a
  // Google group email (create a group for the relevant dev team, if it does
  // not exist) to record failures as well as any follow-up more publicly.
  repeated string notification_emails = 7;

  // Timeout in seconds, terminated by `s`.
  // Example: "60s"
  // If possible, this timeout will be applied to the build + test portion of
  // the build (as opposed to any warmup steps that need to take place); if this
  // is not possible, it will be applied to the entire build.
  string timeout = 8;

  // List of bazel arguments that are passed directly to the `bazel test`
  // commandline.
  //
  // This field serves as an escape hatch for custom bazel behavior not covered
  // by the above fields; popular bazel options may be replaced by an applicable
  // field in the future.
  repeated string bazel_args = 10;

  // RBE instance to use to run build. Defaults to the currently-supported
  // buildbarn instance, but can be changed in order to target a non-prod
  // instance.
  string rbe_instance = 12;

  // Docker image in which each step is performed. If not set, a default
  // auto-updated version is used. This allows for testing specific images in
  // some builds before deploying them more widely.
  string container_image = 13;
}
