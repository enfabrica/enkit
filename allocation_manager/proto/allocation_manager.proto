syntax = "proto3";

package allocation_manager.proto;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/enfabrica/enkit/allocation_manager/proto";

// Describes a vendor-agnostic frontend for allocating licenses to hardware tool
// command invocations.
// Terminology:
//
//   Unit: A hardware testing setup, i.e. one topology.
//
//     Units are "allocated" when the Allocation Manager frontend
//     associates it with a allocation request.
//
//     Units are "in use" when the test is running.  Units should not be
//     "in use" unless they are also "allocated", but "allocated"
//     licenses are not always "in use".

service AllocationManager {
  // Allocate attempts to allocate a Unit for this invocation.
  // If successful, invocations will keep the allocation alive by calling
  // Refresh(). If the invocation is instead queued, invocations
  // will continue polling with Allocate() until allocation is successful.
  //
  // Returns:
  //   * NOT_FOUND if the Unit is not known to the server
  //   * INVALID_ARGUMENT if the request is malformed (see request type for
  //     details)
  rpc Allocate(AllocateRequest) returns (AllocateResponse);

  // Refresh refreshes a allocation while an invocation is still
  // potentially using the Unit. If the invocation fails to refresh the
  // allocation, the Unit may be allocated to another invocation.
  //
  // Returns:
  //   * NOT_FOUND if allocation is not known to the server, and the client
  //     should kill the invocation.
  rpc Refresh(RefreshRequest) returns (RefreshResponse);

  // Release immediately returns an allocated Unit to the pool. This
  // should be called by clients to return Units so they can be quickly
  // allocated to other queued invocations; otherwise, the server will
  // need to wait for the client to time out issuing Refresh calls.
  //
  // Returns:
  //   * NOT_FOUND if the allocation is not known to the server.
  rpc Release(ReleaseRequest) returns (ReleaseResponse);

  // Status returns all Unit configurations and their status.
  rpc Status(StatusRequest) returns (StatusResponse);

  // Sets current status of a Unit (typically health)
  // SetStatus(SetStatusRequest) returns (SetStatusResponse);
}

message Invocation {
  // Opaque identifier for this invocation, determined by the server. This id
  // should be used by the client in subsequent RefreshRequests for this
  // Unit.
  string id = 1;

  // requested topology
  repeated Topology topologies = 2;

  // Owning entity issuing the allocation request. Used for logging purposes
  // only. This could be the name of the user or system issuing the request.
  // This must be sent on every Allocate() and Refresh() call in case the
  // server is restarted.
  string owner = 3;

  // TODO: for CI use, use the test target so we can estimate run duration.
  // what else can we use this for?
  string purpose = 4;

  // TODO: maybe this instead of purpose? maybe build tag goes into purpose?
  /*
  // Build tag of the allocation request. This tag does not need to be unique
  // across multiple AllocateRequests, and may be used to associate multiple
  // such requests with one higher-level task. Typically the Bazel build
  // invocation id is used here. This must be sent on every Allocate() and
  // Refresh() call in case the server is restarted.
  string build_tag = 5; // required
  */
}

message AllocateRequest {
  // Invocation details for this allocation
  Invocation invocation = 1;

  // TODO(STF-6): background defer Release by n seconds
  //int32 defer_release_seconds = 3;
}

message AllocateResponse {
  oneof response_type {
    // Returned when allocation is successful; the invocation should be able
    // to proceed while simultaneously calling Refresh().
    Allocated allocated = 1;

    // Returned when allocation is unsuccessful due to license contention.
    // The invocation should continue to poll by calling Allocate() passing
    // the invocation_id returned in this message.
    Queued queued = 2;
  }
}

message Allocated {
  // Opaque identifier for this invocation, determined by the server. This id
  // should be used by the client in subsequent RefreshRequests for this
  // Unit.
  string id = 1;

  // Actual Unit's topologies.
  repeated Topology topologies = 3;

  // Time at which the request license will be revoked. The client should issue
  // a RefreshRequest for this invocation_id before this time.
  google.protobuf.Timestamp refresh_deadline = 2;
}

message Queued {
  // Opaque identifier for this invocation, determined by the server. This id
  // associates the invocation with a specific spot in the queue; it should be
  // used in subsequent Allocate RPCs or the invocation will be
  // placed at the back of the queue.
  string id = 1;

  // Position of this invocation in the queue.
  //
  // Invocations in position 1 are next to be allocated, with higher positions
  // getting allocations later than lower positions.
  //
  // The queue_position can increase or decrease over time depending on
  // the prioritization strategy, which may allow users to jump ahead
  // of the line, or be bumped to the end of the line.
  uint32 queue_position = 3;

  // Time at which client should retry Allocate. The client
  // should issue its next rpc after this time; if it fails to poll for
  // significantly longer (>5s) it may be moved to the back of the queue.
  google.protobuf.Timestamp next_poll_time = 2;
}

message RefreshRequest {
  // Existing invocation to refresh. Must have been allocated by a call to
  // Allocate() successfully (not queued).

  // Invocation details for this allocation
  Invocation invocation = 1;

  // Allocated Unit's topologies
  repeated Topology allocated = 2;
}

message RefreshResponse {
  // AllocateResponse id that allocated this Unit.
  string id = 1;

  // Time at which the request license will be revoked. The client should
  // issue another RefreshRequest for this invocation_id before this time.
  google.protobuf.Timestamp refresh_deadline = 2;
}

message ReleaseRequest {
  // AllocateResponse that allocated this license.
  string id = 1;
}

message ReleaseResponse {
  // Empty response
}

message Topology {
  // YAML string representing either the topology request (i.e. without IPs) or
  // the topology of the actual hardware allocated (i.e. with IPs).
  string config = 1;
  // For units, unique name extracted from the config for speed/convenience.
  // For requests, leave empty
  string name = 2;
}

enum Allocation {
  ALLOCATION_UNINITIALIZED = 0;
  ALLOCATION_ALLOCATED = 1; // Unit currently allocated
  ALLOCATION_PENDING_AVAILABLE = 2; // Unit may be available soon, in deferred release state
  ALLOCATION_AVAILABLE = 3; // Unit not currently allocated
}
enum Health {
  HEALTH_UNINITIALIZED = 0;
  HEALTH_READY = 1;  // Unit is healthy
  HEALTH_UNKNOWN = 2;  // Unit health is unknown
  HEALTH_BROKEN = 3;  // Unit health is broken/stuck/bad, try automated repair
  HEALTH_SIDELINED = 4;  // Unit is being sidelined, do not attempt automated repair
}
message Status {
  Health health = 1;
  Allocation allocation = 2;
  google.protobuf.Timestamp mtime = 3;
}

message StatusRequest {
  // Empty request
}

message StatusResponse {
  repeated Stats stats = 1;
}

message Stats {
  // Unit's topology
  Topology topology = 1;

  // Current state of the Unit
  Status status = 2;

  //
  google.protobuf.Timestamp timestamp = 4;

}
