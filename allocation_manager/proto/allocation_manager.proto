syntax = "proto3";

package allocation_manager.proto;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/enfabrica/enkit/allocation_manager/proto";

// Describes a vendor-agnostic frontend for allocating licenses to hardware tool
// command invocations.
// Terminology:
//
//   Unit: A hardware testing setup, i.e. one topology.
//
//     Units are "allocated" when the Allocation Manager frontend
//     associates it with a allocation request.
//
//     Units are "in use" when the test is running.  Units should not be
//     "in use" unless they are also "allocated", but "allocated"
//     licenses are not always "in use".

service AllocationManager {
  // Allocate attempts to allocate a Unit for this invocation.
  // If successful, invocations will keep the allocation alive by calling
  // Refresh(). If the invocation is instead queued, invocations
  // will continue polling with Allocate() until allocation is successful.
  //
  // Returns:
  //   * NOT_FOUND if the Unit is not known to the server
  //   * INVALID_ARGUMENT if the request is malformed (see request type for
  //     details)
  rpc Allocate(AllocateRequest) returns (AllocateResponse);

  // Refresh refreshes a allocation while an invocation is still
  // potentially using the Unit. If the invocation fails to refresh the
  // allocation, the Unit may be allocated to another invocation.
  //
  // Returns:
  //   * NOT_FOUND if allocation is not known to the server, and the client
  //     should kill the invocation.
  rpc Refresh(RefreshRequest) returns (RefreshResponse);

  // Release immediately returns an allocated Unit to the pool. This
  // should be called by clients to return Units so they can be quickly
  // allocated to other queued invocations; otherwise, the server will
  // need to wait for the client to time out issuing Refresh calls.
  //
  // Returns:
  //   * NOT_FOUND if the allocation is not known to the server.
  rpc Release(ReleaseRequest) returns (ReleaseResponse);

  // Status returns all Unit configurations and their status.
  rpc Status(StatusRequest) returns (StatusResponse);

  // Sets current status of a Unit (typically health)
  // SetStatus(SetStatusRequest) returns (SetStatusResponse);
}

// Contains the entire inventory of known hosts, along with information gathered about those hosts
// Map is hostname -> HostInfo (below)
message HostInventory {
  map<string, HostInfo> hosts = 1;
}

// Contains information about a single Host machine
message HostInfo {

  // hostname of the host (i.e. nc-gpu-17.rdu)
  string hostname = 1;

  // TODO: Do we want the next three fields? Might not really be useful since they are stale by the time they
  // are used by the AM server

  // Indicates whether this host was reachable when the inventory was created
  bool reachable = 2;

  // Indicates if the host's bb_clientd service was healthy at inventory creation time
  bool clientd_healthy = 3;

  // Indicates if the host's bb_clientd_fuse service was healthy at inventory creation time
  bool clientd_fuse_ok = 4;

  // A list of information about GPUs found on this host (GpuInfo below)
  repeated GpuInfo gpu_infos = 5;

  // A list of information about CPUs found on this host (CpuInfo below)
  repeated CpuInfo cpu_infos = 6;
}

// Contains information about a single GPU on a host machine
message GpuInfo {
  // The bus_id of the GPU on the host (eg. 46:00.0)
  string bus_id = 1;

  // The model string of the GPU (eg. NVIDIA Corporation GP104GL)
  string gpu_model = 2;

  // The model string of the GPU's card (eg. Tesla P4)
  string card_model = 3;

  // The amount of video memory available to the GPU, in megabytes
  uint32 vram_mb = 4;
}

// Contains information about a single CPU on a host machine
message CpuInfo {
  // The 0-based idx of the CPU, as seen in /proc/cpuinfo
  uint32 cpu_idx = 1;

  // The family code for the CPU (eg. 25 for Zen)
  uint32 family = 2;

  // The model string of the CPU (eg. AMD EPYC 7413 24-Core Processor)
  string model_name = 3;

  // The speed of the CPU, in MHz (eg. 2650.0)
  float freq_mhz = 4;

  // The number of cores had by the CPU (eg. 24)
  uint32 num_cores = 5;

  // The amount of cache, represented by a string (eg. 512 KB)
  // TODO: Parse the string properly, so we can have the cache size in int format
  string cache = 6;
}

message AcfInfo {
    // TODO: Fill in ACF fields
}

// A "polymorphic" representation of the various types of info a Unit can hold
message UnitInfo {
    oneof Info {
      HostInfo HostInfo = 1;
      GpuInfo GpuInfo = 2;
      AcfInfo AcfInfo = 3;
    }
}

// if no fields are provided (empty message), any host will match
message HostRequest {
    // if specified, you are requesting a specific host by hostname. Other fields will be ignored
    optional string hostname = 1;

    // if specified, return a host that has the given number of CPUs, or more
    optional uint32 num_cpus = 2;

    // if specified, return a host that has the given number of GPUs, or more
    optional uint32 num_gpus = 3;
}

message TopologyRequest {
    // if specified, you are requesting a known topology by name. Other fields will be ignored
    optional string name = 1;

    // if specified, checks for hosts that match the given criteria
    repeated HostRequest hosts = 2;
}

message Invocation {
  // Opaque identifier for this invocation, determined by the server. This id
  // should be used by the client in subsequent RefreshRequests for this
  // Unit.
  string id = 1;

  // OBSOLETED: replaced with TopologyRequest, below
  // repeated Topology topologies = 2;

  // Owning entity issuing the allocation request. Used for logging purposes
  // only. This could be the name of the user or system issuing the request.
  // This must be sent on every Allocate() and Refresh() call in case the
  // server is restarted.
  string owner = 3;

  // TODO: for CI use, use the test target so we can estimate run duration.
  // what else can we use this for?
  string purpose = 4;

  // TODO: maybe this instead of purpose? maybe build tag goes into purpose?
  /*
  // Build tag of the allocation request. This tag does not need to be unique
  // across multiple AllocateRequests, and may be used to associate multiple
  // such requests with one higher-level task. Typically the Bazel build
  // invocation id is used here. This must be sent on every Allocate() and
  // Refresh() call in case the server is restarted.
  string build_tag = 5; // required
  */

  // topology request
  TopologyRequest request = 6;
}

message AllocateRequest {
  // Invocation details for this allocation
  Invocation invocation = 1;

  // TODO(STF-6): background defer Release by n seconds
  //int32 defer_release_seconds = 3;
}

message AllocateResponse {
  oneof response_type {
    // Returned when allocation is successful; the invocation should be able
    // to proceed while simultaneously calling Refresh().
    Allocated allocated = 1;

    // Returned when allocation is unsuccessful due to license contention.
    // The invocation should continue to poll by calling Allocate() passing
    // the invocation_id returned in this message.
    Queued queued = 2;
  }
}

message Allocated {
  // Opaque identifier for this invocation, determined by the server. This id
  // should be used by the client in subsequent RefreshRequests for this
  // Unit.
  string id = 1;

  // Time at which the request license will be revoked. The client should issue
  // a RefreshRequest for this invocation_id before this time.
  google.protobuf.Timestamp refresh_deadline = 2;

  // OBSOLETED: replaced with single, allocated Topology, below
  // repeated Topology topologies = 3;

  // Actual allocated topology
  Topology topology = 4;
}

message Queued {
  // Opaque identifier for this invocation, determined by the server. This id
  // associates the invocation with a specific spot in the queue; it should be
  // used in subsequent Allocate RPCs or the invocation will be
  // placed at the back of the queue.
  string id = 1;

  // Position of this invocation in the queue.
  //
  // Invocations in position 1 are next to be allocated, with higher positions
  // getting allocations later than lower positions.
  //
  // The queue_position can increase or decrease over time depending on
  // the prioritization strategy, which may allow users to jump ahead
  // of the line, or be bumped to the end of the line.
  uint32 queue_position = 3;

  // Time at which client should retry Allocate. The client
  // should issue its next rpc after this time; if it fails to poll for
  // significantly longer (>5s) it may be moved to the back of the queue.
  google.protobuf.Timestamp next_poll_time = 2;
}

message RefreshRequest {
  // Existing invocation to refresh. Must have been allocated by a call to
  // Allocate() successfully (not queued).

  // Invocation details for this allocation
  Invocation invocation = 1;

  // OBSOLETED: replaced with single, allocated Topology, below
  // repeated Topology allocated = 2;

  // Allocated Topology
  Topology allocated = 3;
}

message RefreshResponse {
  // AllocateResponse id that allocated this Unit.
  string id = 1;

  // Time at which the request license will be revoked. The client should
  // issue another RefreshRequest for this invocation_id before this time.
  google.protobuf.Timestamp refresh_deadline = 2;
}

message ReleaseRequest {
  // AllocateResponse that allocated this license.
  string id = 1;
}

message ReleaseResponse {
  // Empty response
}

message Topology {
  // OBSOLETED: replaced with list of HostInfo, etc
  // string config = 1;

  // Unique name extracted from the config for speed/convenience.
  string name = 2;

  // start with just hosts in the topology for first step
  repeated HostInfo hosts = 3;
  
  // TODO: repeated AcfInfo acfs = 4;
}

enum Allocation {
  ALLOCATION_UNINITIALIZED = 0;
  ALLOCATION_ALLOCATED = 1; // Unit currently allocated
  ALLOCATION_PENDING_AVAILABLE = 2; // Unit may be available soon, in deferred release state
  ALLOCATION_AVAILABLE = 3; // Unit not currently allocated
}
enum Health {
  HEALTH_UNINITIALIZED = 0;
  HEALTH_READY = 1;  // Unit is healthy
  HEALTH_UNKNOWN = 2;  // Unit health is unknown
  HEALTH_BROKEN = 3;  // Unit health is broken/stuck/bad, try automated repair
  HEALTH_SIDELINED = 4;  // Unit is being sidelined, do not attempt automated repair
}
message Status {
  Health health = 1;
  Allocation allocation = 2;
  google.protobuf.Timestamp mtime = 3;
}

message StatusRequest {
  // Empty request
}

message StatusResponse {
  repeated Stats stats = 1;
}

message Stats {
  // OBSOLETED: replaced with UnitInfo, below
  // Topology topology = 1;

  // Current state of the Unit
  Status status = 2;

  //
  google.protobuf.Timestamp timestamp = 4;

  // Unit's info
  UnitInfo info = 5;

}
